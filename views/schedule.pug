mixin matchTemplate
    div 
        | {{#ifCond this.data.isSingleMatch '||' this.data.isUnique}}<b>{{/ifCond}}
        | {{#if this.data.shifts}}<span class="dim">{{/if}}
        | {{this.name}}
        | {{#if this.data.isSingleMatch}}{{#if this.wants}}🌟{{else}}⭐{{/if}}{{else}}{{#if this.data.isUnique}}⭐{{/if}}{{/if}}
        | {{#if this.wants}}💚{{/if}}
        | {{#if this.data.shifts}}(🛠x{{this.data.shifts}}){{/if}}
        | {{#ifCond this.data.signups '>' 1}}(✔x{{this.data.signups}}){{/ifCond}}
        | {{#ifCond this.data.isSingleMatch '||' this.data.isUnique}}</b>{{/ifCond}}
        | {{#if this.data.shifts}}</span>{{/if}}

html(lang="en")
    head
        title= title
        meta(charset="utf-8")
        style.
            .race{
                width:100%;
            }
            .variations{
                font-size: 0.75em;
                white-space: nowrap;
                text-overflow: ellipsis;
            }
            .crew{
                width: 33%;
                min-height:1em;
            }
            .dim{
                font-size: 0.9em;
                color: #404040;
            }
            .notneeded{
                opacity: 0.85;
            }
            .vis-labelset .vis-label .vis-inner {
                width: 250px;
                text-overflow: ellipsis;
            }
            #crew-visualization .shifts{
                background-color: #afffaf;
            }
            #crew-visualization .availability{
                background-color: #efefef;
            }
            .comm{
                background-color: #BDA4F7;
            }
            .track{
                background-color: #63D0EC;
            }
            .restream{
                background-color: #FF9928;
            }
            .item{
                border: 1px solid #97b0f8;
                color: #1a1a1a;
                background-color: #d5ddf6;
            }

        link(href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css", rel="stylesheet")
        link(href="/vis/vis-timeline-graph2d.min.css", rel="stylesheet")
    body
        main(class="container-fluid", role="main")
            h1= title
            h2 Match timeline
            div(id="match-visualization")
            h2 Crew availability
            div(id="crew-visualization")
            h2 Matches in text form
            div(id="match-text")
        script(src='//cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js')
        script(src='//cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.5/handlebars.min.js')
        script(src='/vis/vis.js')
        script(id="episode-template", type="text/x-handlebars-template")
            div(class="variations") {{data.variations}}
            div(class="race") 
                b [{{times data.when}}] {{data.playerInfo.nameText}}
            table(class="race table")
                thead
                    tr
                        th Assigned
                        th Available
                tbody
                    tr
                        td(class="comm crew")
                            | {{#ifCond data.crews.0.value.length '<' 2}}
                            span(style="float:right") 👀
                            | {{/ifCond}}
                            | {{#each data.crews.0.value}}
                            div <b>{{this.name}}</b>
                            | {{/each}}
                        td(class="comm crew {{#ifCond data.crews.0.value.length '>=' 2}}notneeded{{/ifCond}}")
                            | {{#whatcrew data.when 'commentator' data.playerInfo.nameText}}
                            +matchTemplate
                            | {{/whatcrew}}
                    tr
                        td(class="track crew")
                            | {{#ifCond data.crews.1.value.length '<' 1}}
                            span(style="float:right") 👀
                            | {{/ifCond}}
                            | {{#each data.crews.1.value}}
                            div <b>{{this.name}}</b>
                            | {{/each}}
                        td(class="track crew {{#ifCond data.crews.1.value.length '>=' 1}}notneeded{{/ifCond}}")
                            | {{#whatcrew data.when 'tracker' data.playerInfo.nameText}}
                            +matchTemplate
                            | {{/whatcrew}}
                    | {{#if data.needsBroadcasters}}
                    tr
                        td(class="restream crew") 
                            | {{#ifCond data.crews.2.value.length '<' 1}}
                            span(style="float:right") 👀
                            | {{/ifCond}}
                            | {{#each data.crews.2.value}}
                            div <b>{{this.name}}</b>
                            | {{/each}}
                        td(class="restream crew {{#ifCond data.crews.2.value.length '>=' 1}}notneeded{{/ifCond}}") 
                            | {{#whatcrew data.when 'restreamer' data.playerInfo.nameText}}
                            +matchTemplate
                            | {{/whatcrew}}
                    | {{/if}}
    
        script.
            var dataSets = {
                sg: !{JSON.stringify(sgEp)},
                alttpr: !{JSON.stringify(alttprEp)},
                other: !{JSON.stringify(otherEp)},
                crewAvailability: !{JSON.stringify(crewAvailability)},
                scheduleAvailability: !{JSON.stringify(scheduleAvailability)}
            };
            Handlebars.registerHelper('whatcrew', function (whenT, role, match, options) {
                let when = moment(whenT).utc().format();
                if(!dataSets.scheduleAvailability[when])
                    return "";
                if(!dataSets.scheduleAvailability[when][role])
                    return "";

                let people = Object.keys(dataSets.scheduleAvailability[when][role]);
                people.sort( (a, b)=> {
                    let personA = dataSets.scheduleAvailability[when][role][a];
                    let personB = dataSets.scheduleAvailability[when][role][b];
                    
                    if(personA.isSingleMatch && !personB.isSingleMatch)
                        return -1;
                    if(!personA.isSingleMatch && personB.isSingleMatch)
                        return 1;

                    if(personA.isUnique && !personB.isUnique)
                        return -1;
                    if(!personA.isUnique && personB.isUnique)
                        return 1;
                    
                    let shiftDifference = personA.shifts.length - personB.shifts.length;
                    if(shiftDifference !== 0)
                        return shiftDifference;
                    
                    let aWants = personA.preferredMatches.includes(match);
                    let bWants = personB.preferredMatches.includes(match);
                    if(aWants && !bWants)
                        return -1;
                    if(!aWants && bWants)
                        return 1;

                    let availDifference = personA.availability.length - personB.availability.length;
                    return availDifference;

                });
                let ret = "";
                people.forEach(name => {
                    ret += options.fn({name: name, wants: dataSets.scheduleAvailability[when][role][name].preferredMatches.includes(match), data: dataSets.scheduleAvailability[when][role][name]});
                });

                return ret;

            });
            Handlebars.registerHelper('times', function(time, options){
                return moment(time).format('h:mm A');
            });
            Handlebars.registerHelper('ifCond', function (v1, operator, v2, options) {
                switch (operator) {
                    case '==':
                        return (v1 == v2) ? options.fn(this) : options.inverse(this);
                    case '===':
                        return (v1 === v2) ? options.fn(this) : options.inverse(this);
                    case '!=':
                        return (v1 != v2) ? options.fn(this) : options.inverse(this);
                    case '!==':
                        return (v1 !== v2) ? options.fn(this) : options.inverse(this);
                    case '<':
                        return (v1 < v2) ? options.fn(this) : options.inverse(this);
                    case '<=':
                        return (v1 <= v2) ? options.fn(this) : options.inverse(this);
                    case '>':
                        return (v1 > v2) ? options.fn(this) : options.inverse(this);
                    case '>=':
                        return (v1 >= v2) ? options.fn(this) : options.inverse(this);
                    case '&gt;=':
                        return (v1 >= v2) ? options.fn(this) : options.inverse(this);
                    case '&&':
                        return (v1 && v2) ? options.fn(this) : options.inverse(this);
                    case '||':
                        return (v1 || v2) ? options.fn(this) : options.inverse(this);
                    default:
                        return options.inverse(this);
                }
            });
            var template = Handlebars.compile(document.getElementById('episode-template').innerHTML);

            var container = document.getElementById("match-visualization");
            var arrayData = [...dataSets.sg.map(x=>({...x, group: 1})), ...dataSets.alttpr.map(x=>({...x, group: 2})), ...dataSets.other.map(x=>({...x, group: 3}))];
            var data = arrayData.map(
                    function(item){
                        return {
                            id: item.id,
                            group: item.group,
                            data: Object.assign({}, item),
                            start: moment(item.when).format(),
                            end: moment(item.when).add(item.length, 'minutes').format()
                        };
                    }
                );


            data.sort((a,b) => {
                return moment(a.start).diff(moment(b.start));
            });

            let output = "";
            let lastTime = null;

            data.forEach(item => {
                let theTime = moment(item.start);
                if(!lastTime || !theTime.isSame(lastTime)){
                    if(lastTime)
                        output += "</div>";
                    output += "<h3>"+theTime.format("h:mm A")+"</h3>";
                    output += "<div class=\"row\">";
                    lastTime = theTime;

                }

                output += "<div class=\"item col-4 col-sm-6\">";
                output += template(item);
                output += "</div>";
            });

            if(lastTime)
                output += "</div>";

            document.getElementById("match-text").innerHTML = output;
            
            var groups = [
                {
                    id: 1,
                    content: "SpeedGaming",
                    className: "setGroups"
                },
                {
                    id: 2,
                    content: "ALTTPRandomizer",
                    className: "setGroups"
                },
                {
                    id: 3,
                    content: "Undecided",
                    className: "setGroups"
                }
            ];
            var crewGroups = [];
            var crewData = [];
            var counter = 0;
            let people = Object.keys(dataSets.crewAvailability).filter(x=> dataSets.crewAvailability[x].availability.length > 0);
            people.sort((a,b) => {
                let shiftDisparity = dataSets.crewAvailability[a].shifts.length - dataSets.crewAvailability[b].shifts.length;
                if(shiftDisparity !== 0){
                    return shiftDisparity;
                }else{
                    return ('' + a).localeCompare('' + b);
                }
            });
            people.forEach(person => {
                let crew = dataSets.crewAvailability[person];
                counter++;
                crewGroups.push({
                    id: counter,
                    content: person + (crew.shifts.length > 0 ? " (" + crew.shifts.length + " times) ⚠" : "✅"),
                    className: "setGroups"
                });

                crewData.push(...crew.smartAvailability.map(a => Object.assign({}, a, {group: counter, content: a.role, className: "availability"})));
                crewData.push(...crew.shifts.map(a => Object.assign({}, a, {group: counter, content: a.role, className: "shifts"})));

            });
            var items = new vis.DataSet(data);
            var timeline = new vis.Timeline(container);
            var crewTimeline = new vis.Timeline(document.getElementById("crew-visualization"));

            timeline.on('rangechanged', properties => {
                var range = timeline.getWindow();
                crewTimeline.setWindow(range.start, range.end, {animation: false});
            });
            
            crewTimeline.on('rangechanged', properties => {
                var range = crewTimeline.getWindow();
                timeline.setWindow(range.start, range.end, {animation: false});
            });
            timeline.setOptions({template: template, clickToUse: true});
            timeline.setGroups(groups);
            timeline.setItems(items);
            

            var crewItems = new vis.DataSet(crewData);
            crewTimeline.setOptions({clickToUse: true});
            crewTimeline.setGroups(crewGroups);
            crewTimeline.setItems(crewItems);
            

